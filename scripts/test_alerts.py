#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
"""

import asyncio
import aiohttp
import time
import random
import logging
from typing import List, Dict, Any
import json
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ENDPOINTS = [
    "http://localhost:8001",  # EfficientNet v1
    "http://localhost:8002",  # EfficientNet v2  
    "http://localhost:8003",  # ResNet v1
]

TELEGRAM_NOTIFIER = "http://localhost:8085"

class AlertTester:
    def __init__(self):
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.close()

    async def check_services_health(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        results = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–∏—Å–æ–≤
        for endpoint in API_ENDPOINTS:
            try:
                async with self.session.get(f"{endpoint}/health", timeout=5) as response:
                    if response.status == 200:
                        data = await response.json()
                        results[endpoint] = True
                        logger.info(f"‚úÖ {endpoint} - OK")
                    else:
                        results[endpoint] = False
                        logger.warning(f"‚ö†Ô∏è {endpoint} - HTTP {response.status}")
            except Exception as e:
                results[endpoint] = False
                logger.error(f"‚ùå {endpoint} - {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram notifier
        try:
            async with self.session.get(f"{TELEGRAM_NOTIFIER}/health", timeout=5) as response:
                if response.status == 200:
                    results[TELEGRAM_NOTIFIER] = True
                    logger.info(f"‚úÖ Telegram notifier - OK")
                else:
                    results[TELEGRAM_NOTIFIER] = False
                    logger.warning(f"‚ö†Ô∏è Telegram notifier - HTTP {response.status}")
        except Exception as e:
            results[TELEGRAM_NOTIFIER] = False
            logger.error(f"‚ùå Telegram notifier - {str(e)}")
            
        return results

    async def test_telegram_notification(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        try:
            async with self.session.post(f"{TELEGRAM_NOTIFIER}/test", timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: HTTP {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {str(e)}")
            return False

    async def generate_high_load(self, endpoint: str, duration: int = 60) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ {endpoint} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª)
        test_image = b"fake_image_data" * 1000  # –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        start_time = time.time()
        requests_sent = 0
        successful_requests = 0
        errors = 0
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        
        async def send_request():
            nonlocal requests_sent, successful_requests, errors
            
            try:
                # FormData –¥–ª—è —Ñ–∞–π–ª–∞
                data = aiohttp.FormData()
                data.add_field('file', test_image, filename='test.jpg', content_type='image/jpeg')
                
                async with self.session.post(
                    f"{endpoint}/predict", 
                    data=data,
                    timeout=30
                ) as response:
                    requests_sent += 1
                    
                    if response.status == 200:
                        successful_requests += 1
                    else:
                        errors += 1
                        
            except Exception as e:
                requests_sent += 1
                errors += 1
                logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        while time.time() - start_time < duration:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for _ in range(10):
                tasks.append(asyncio.create_task(send_request()))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            if len(tasks) >= 50:
                await asyncio.gather(*tasks[:25], return_exceptions=True)
                tasks = tasks[25:]
            
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        duration_actual = end_time - start_time
        
        result = {
            "endpoint": endpoint,
            "duration": duration_actual,
            "requests_sent": requests_sent,
            "successful_requests": successful_requests,
            "errors": errors,
            "error_rate": errors / requests_sent if requests_sent > 0 else 0,
            "rps": requests_sent / duration_actual if duration_actual > 0 else 0
        }
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {endpoint}:")
        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_sent}")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}")
        logger.info(f"   –û—à–∏–±–æ–∫: {errors}")
        logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–æ–∫: {result['error_rate']:.2%}")
        logger.info(f"   RPS: {result['rps']:.2f}")
        
        return result

    async def check_prometheus_metrics(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ Prometheus"""
        logger.info("üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Prometheus...")
        
        prometheus_url = "http://localhost:9090"
        metrics_queries = [
            "whales_api_requests_total",
            "whales_api_error_rate", 
            "whales_api_inference_time_seconds",
            "whales_api_model_loaded"
        ]
        
        results = {}
        
        for query in metrics_queries:
            try:
                async with self.session.get(
                    f"{prometheus_url}/api/v1/query",
                    params={"query": query},
                    timeout=10
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        results[query] = data.get("data", {}).get("result", [])
                        logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ {query}: {len(results[query])} –∑–Ω–∞—á–µ–Ω–∏–π")
                    else:
                        results[query] = None
                        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∞ {query}: HTTP {response.status}")
            except Exception as e:
                results[query] = None
                logger.error(f"‚ùå –ú–µ—Ç—Ä–∏–∫–∞ {query}: {str(e)}")
        
        return results

    async def trigger_memory_alert(self, endpoint: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –∞–ª–µ—Ä—Ç –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏"""
        logger.info(f"üß† –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –∞–ª–µ—Ä—Ç –ø–æ –ø–∞–º—è—Ç–∏ –¥–ª—è {endpoint}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        tasks = []
        test_image = b"large_fake_image_data" * 10000  # –ë–æ–ª—å—à–æ–µ "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
        for _ in range(100):  # 100 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async def memory_intensive_request():
                try:
                    data = aiohttp.FormData()
                    data.add_field('file', test_image, filename='large_test.jpg', content_type='image/jpeg')
                    
                    async with self.session.post(
                        f"{endpoint}/predict",
                        data=data,
                        timeout=60
                    ) as response:
                        return response.status == 200
                except:
                    return False
            
            tasks.append(asyncio.create_task(memory_intensive_request()))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        successful = sum(1 for r in results if r is True)
        
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {successful}/{len(tasks)} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏")
        return successful > 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üêã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∏—Ç–æ–≤")
    
    async with AlertTester() as tester:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        health_status = await tester.check_services_health()
        healthy_services = [k for k, v in health_status.items() if v]
        
        if not healthy_services:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        telegram_works = await tester.test_telegram_notification()
        if not telegram_works:
            logger.warning("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
        metrics = await tester.check_prometheus_metrics()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–ª–µ—Ä—Ç–æ–≤
        test_scenarios = [
            {
                "name": "–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏ (EfficientNet v1)",
                "endpoint": "http://localhost:8001",
                "duration": 30,
                "expected_alerts": ["–í–æ–∑–º–æ–∂–Ω–æ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"]
            },
            {
                "name": "–¢–µ—Å—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (EfficientNet v2)",
                "endpoint": "http://localhost:8002", 
                "duration": 30,
                "expected_alerts": ["–£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"]
            },
            {
                "name": "–¢–µ—Å—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (ResNet)",
                "endpoint": "http://localhost:8003",
                "duration": 45,
                "expected_alerts": ["HighInferenceTime - –≤—Ä–µ–º—è > 5 —Å–µ–∫"]
            }
        ]
        
        load_results = []
        
        for scenario in test_scenarios:
            if scenario["endpoint"] in healthy_services:
                logger.info(f"\nüß™ {scenario['name']}")
                result = await tester.generate_high_load(
                    scenario["endpoint"], 
                    scenario["duration"]
                )
                load_results.append(result)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                logger.info("‚è≥ –ü–∞—É–∑–∞ 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏...")
                await asyncio.sleep(15)
        
        # 5. –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –∞–ª–µ—Ä—Ç –ø–æ –ø–∞–º—è—Ç–∏
        if healthy_services:
            await tester.trigger_memory_alert(healthy_services[0])
        
        # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 50)
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(health_status)}")
        logger.info(f"‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {len(healthy_services)}")
        logger.info(f"üì± Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if telegram_works else '‚ùå'}")
        logger.info(f"üìà Prometheus –º–µ—Ç—Ä–∏–∫–∏: {len([k for k, v in metrics.items() if v])}/{len(metrics)}")
        
        logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for result in load_results:
            logger.info(f"  {result['endpoint']}:")
            logger.info(f"    RPS: {result['rps']:.2f}")
            logger.info(f"    –û—à–∏–±–æ–∫: {result['error_rate']:.2%}")
            logger.info(f"    –ó–∞–ø—Ä–æ—Å–æ–≤: {result['requests_sent']}")
        
        logger.info("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ –∞–ª–µ—Ä—Ç—ã:")
        logger.info("  - HighInferenceTime (–µ—Å–ª–∏ ResNet > 5 —Å–µ–∫)")
        logger.info("  - HighErrorRate (–µ—Å–ª–∏ –æ—à–∏–±–æ–∫ > 10%)")
        logger.info("  - HighCPUUsage (–µ—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞ > 80%)")
        logger.info("  - HighMemoryUsage (–µ—Å–ª–∏ –ø–∞–º—è—Ç—å > 85%)")
        
        logger.info("\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        logger.info("üåê Grafana: http://localhost:3001")
        logger.info("üìä Prometheus: http://localhost:9090")
        logger.info("ü§ñ Alertmanager: http://localhost:9093")

if __name__ == "__main__":
    asyncio.run(main()) 
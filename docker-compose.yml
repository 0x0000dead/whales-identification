services:
  # Основной API сервис с EfficientNet v1
  api-efficientnet-v1:
    build:
      context: ./whales_be_service
      dockerfile: Dockerfile
    container_name: whales-api-efficientnet-v1
    ports:
      - "8001:8000"
    environment:
      - DEFAULT_MODEL=efficientnet_v1
      - DEVICE=cpu
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    volumes:
      - ./research/demo-ui/models:/app/models
      - ./data/datasets:/app/data
    networks:
      - whale-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API сервис с EfficientNet v2
  api-efficientnet-v2:
    build:
      context: ./whales_be_service
      dockerfile: Dockerfile
    container_name: whales-api-efficientnet-v2
    ports:
      - "8002:8000"
    environment:
      - DEFAULT_MODEL=efficientnet_v2
      - DEVICE=cpu
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    volumes:
      - ./research/demo-ui/models:/app/models
      - ./research/demo-ui-mask/models:/app/models_v2
      - ./data/datasets:/app/data
    networks:
      - whale-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API сервис с ResNet
  api-resnet-v1:
    build:
      context: ./whales_be_service
      dockerfile: Dockerfile
    container_name: whales-api-resnet-v1
    ports:
      - "8003:8000"
    environment:
      - DEFAULT_MODEL=resnet_v1
      - DEVICE=cpu
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    volumes:
      - ./research/demo-ui-mask/models:/app/models
      - ./data/datasets:/app/data
    networks:
      - whale-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx для балансировки нагрузки
  nginx:
    image: nginx:alpine
    container_name: whales-nginx
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-efficientnet-v1
      - api-efficientnet-v2
      - api-resnet-v1
    networks:
      - whale-net

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: whale-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_BACKEND=http://nginx:8080
    depends_on:
      - nginx
    networks:
      - whale-net

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: whales-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - whale-net

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: whales-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - whale-net

networks:
  whale-net:
    driver: bridge

volumes:
  grafana-storage:

#!/usr/bin/env python3
import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, List

import requests
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Telegram Notifier for Whale Models")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "webhook_secret")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    logger.error("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
webhook_requests_total = 0
webhook_requests_successful = 0
webhook_requests_failed = 0
telegram_messages_sent = 0
telegram_messages_failed = 0

def send_telegram_message(message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    global telegram_messages_sent, telegram_messages_failed
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        telegram_messages_failed += 1
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        telegram_messages_sent += 1
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        telegram_messages_failed += 1
        return False

def format_alert_message(alert: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è Telegram"""
    status = alert.get("status", "unknown")
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
    if status == "firing":
        status_emoji = "üö®" if alert.get("labels", {}).get("severity") == "critical" else "‚ö†Ô∏è"
    else:
        status_emoji = "‚úÖ"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    alert_name = alert.get("labels", {}).get("alertname", "Unknown")
    model = alert.get("labels", {}).get("model", "Unknown")
    severity = alert.get("labels", {}).get("severity", "info")
    
    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    summary = alert.get("annotations", {}).get("summary", "")
    description = alert.get("annotations", {}).get("description", "")
    
    # –í—Ä–µ–º—è
    starts_at = alert.get("startsAt", "")
    if starts_at:
        try:
            dt = datetime.fromisoformat(starts_at.replace('Z', '+00:00'))
            time_str = dt.strftime("%Y-%m-%d %H:%M:%S UTC")
        except:
            time_str = starts_at
    else:
        time_str = "Unknown"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"{status_emoji} <b>{alert_name}</b>\n\n"
    
    if model != "Unknown":
        message += f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {model}\n"
    
    message += f"üìä <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</b> {severity.upper()}\n"
    message += f"üìÖ <b>–í—Ä–µ–º—è:</b> {time_str}\n"
    message += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status.upper()}\n\n"
    
    if summary:
        message += f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{summary}\n\n"
    
    if description:
        message += f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>\n{description}\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–µ–π–±–ª—ã
    labels = alert.get("labels", {})
    if labels:
        filtered_labels = {k: v for k, v in labels.items() 
                          if k not in ["alertname", "model", "severity", "job", "instance"]}
        if filtered_labels:
            message += f"üè∑Ô∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            for key, value in filtered_labels.items():
                message += f"  ‚Ä¢ {key}: {value}\n"
    
    return message

@app.post("/webhook")
async def receive_alert(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç Alertmanager"""
    global webhook_requests_total, webhook_requests_successful, webhook_requests_failed
    
    webhook_requests_total += 1
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        content_type = request.headers.get("content-type", "")
        if not content_type.startswith("application/json"):
            webhook_requests_failed += 1
            return JSONResponse(
                status_code=400,
                content={"error": "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json"}
            )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        body = await request.json()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(body, indent=2)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        alerts = body.get("alerts", [])
        if not alerts:
            logger.warning("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –≤ webhook")
            webhook_requests_successful += 1
            return JSONResponse(content={"status": "no alerts"})
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        sent_count = 0
        for alert in alerts:
            message = format_alert_message(alert)
            if send_telegram_message(message):
                sent_count += 1
        
        webhook_requests_successful += 1
        return JSONResponse(content={
            "status": "success",
            "processed_alerts": len(alerts),
            "sent_messages": sent_count
        })
        
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
        webhook_requests_failed += 1
        return JSONResponse(
            status_code=400,
            content={"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"}
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        webhook_requests_failed += 1
        return JSONResponse(
            status_code=500,
            content={"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}
        )

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "telegram_configured": bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID)
    }

@app.get("/metrics")
async def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Prometheus"""
    from fastapi.responses import PlainTextResponse
    
    metrics = [
        f"telegram_webhook_requests_total {webhook_requests_total}",
        f"telegram_webhook_requests_successful {webhook_requests_successful}",
        f"telegram_webhook_requests_failed {webhook_requests_failed}",
        f"telegram_messages_sent_total {telegram_messages_sent}",
        f"telegram_messages_failed_total {telegram_messages_failed}",
        f"telegram_bot_configured {1 if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID else 0}",
    ]
    
    return PlainTextResponse(
        content="\n".join(metrics) + "\n",
        media_type="text/plain"
    )

@app.post("/test")
async def test_notification():
    """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    test_message = """üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> test-model
üìä <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</b> INFO
üìÖ <b>–í—Ä–µ–º—è:</b> """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC") + """
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> TESTING

üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>
–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""

    success = send_telegram_message(test_message)
    
    return JSONResponse(content={
        "status": "success" if success else "error",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
    })

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8080) 